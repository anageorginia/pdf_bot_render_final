import logging
import os
import zipfile
import asyncio

from flask import Flask
from threading import Thread

from pdf2image import convert_from_path
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters
)

BOT_TOKEN = "7842250880:AAEPK586WXhyLeGyfanoEbRyZTBqrXUKbu8"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UptimeRobot
app = Flask('')

@app.route('/')
def home():
    return "PDF bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç) –ü—Ä–∏—à–ª–∏ –º–Ω–µ PDF-—Ñ–∞–π–ª, –∏ —è –≤–µ—Ä–Ω—É ZIP-–∞—Ä—Ö–∏–≤ —Å–æ —Å–∫—Ä–∏–Ω–∞–º–∏."
    )

async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message

    if not message.document:
        await message.reply_text("–¢—ã –≤—Ç–∏—Ä–∞–µ—à—å –º–Ω–µ –∫–∞–∫—É—é-—Ç–æ –¥–∏—á—å! –ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, PDF-–¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    doc = message.document
    file_name = doc.file_name.lower()

    if not (file_name.endswith('.pdf') or doc.mime_type == 'application/pdf'):
        await message.reply_text("–¢—ã –≤—Ç–∏—Ä–∞–µ—à—å –º–Ω–µ –∫–∞–∫—É—é-—Ç–æ –¥–∏—á—å! –ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, PDF-–¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    if doc.file_size and doc.file_size > 20 * 1024 * 1024:
        await message.reply_text("–ü—Ä–æ—Å—Ç–∏, –¥—Ä—É–≥, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>20MB). Telegram –Ω–µ –¥–∞—ë—Ç –±–æ—Ç—É –µ–≥–æ —Å–∫–∞—á–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —É–º–µ–Ω—å—à–∏—Ç—å PDF.")
        return

    await message.reply_text("–°–∫–∞—á–∏–≤–∞—é PDF...")

    os.makedirs("temp", exist_ok=True)
    pdf_file_path = os.path.join("temp", file_name)

    try:
        file = await context.bot.get_file(doc.file_id)
        await file.download_to_drive(custom_path=pdf_file_path)
    except Exception as e:
        await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return

    await message.reply_text("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é PDF –≤ –∫–∞—Ä—Ç–∏–Ω–∫–∏...")

    images = convert_from_path(pdf_file_path, dpi=150)
    zip_filename = file_name.replace('.pdf', '_pages.zip')
    zip_filepath = os.path.join("temp", zip_filename)

    with zipfile.ZipFile(zip_filepath, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for i, img in enumerate(images):
            page_num = i + 1
            img_filename = f"page_{page_num}.png"
            img_path = os.path.join("temp", img_filename)
            img.save(img_path, "PNG")
            zipf.write(img_path, arcname=img_filename)
            os.remove(img_path)

    with open(zip_filepath, 'rb') as f:
        await message.reply_document(
            document=InputFile(f, filename=zip_filename),
            caption="–í–æ—Ç —Ç–≤–æ–π ZIP —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏, –æ–±—Ä–∞—â–∞–π—Å—è ü´°"
        )

    os.remove(pdf_file_path)
    os.remove(zip_filepath)

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.ALL, handle_pdf))
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    keep_alive()
    asyncio.run(main())
